#include "pci.h"
#include "rtl8139.h"
#include "screen.h"
#include "isr.h"

#define CONFIG1_REGISTER 0x52
#define COMMANDREGISTER  0x37 
#define INT_MASK_REG	0x3c
#define INT_STATUS_REG 0x3e
#define PACKET_READ_ADDRESS 0x38
#define RECEIVE_CONFIG_REG 0x44
#define TRSMIT_START_DESC 0x20
#define TRSMIT_STATUS_DESC 0x10
#define RECEIVE_BUFFER_ADDRESS 0x30
 
char rx_buffer[8208]; 
 
static uint32 BaseAddress=0x0;

void DumpReceiveReg(unsigned char *buf)
{
	int i;
	for(i=0;i<40;i++)
	{
		printf(" %x",buf[i]);
		buf[i] = 0x0;
	}
}

void Rtl8139Interrupt(registers_t *regs)
{
   outw(BaseAddress + INT_MASK_REG, 0);
   uint32 reg2 = inw(BaseAddress + INT_STATUS_REG);
   printf("Status of Interrupt Status = 0x%x\n", reg2);
   outw(BaseAddress + INT_STATUS_REG, reg2); //reset
   if( reg2 & 0x01 ) {
		ReceivePacketFromWire(rx_buffer);
    }
    outw((BaseAddress + PACKET_READ_ADDRESS), 0);
    outw((BaseAddress + INT_MASK_REG), 0xe1ff); // TOK + ROK
    outl((BaseAddress + RECEIVE_CONFIG_REG), 0xa);//
}

void GetInterruptPin()
{
	uint32 InterruptReg  = ReadConfigurationDword(0, 3, INT_MASK_REG);
	uint8 InterruptPin = (InterruptReg > 8)&0xff;
	uint8 InterruptLine = (InterruptReg)&0xff;
	printf("Interrupt Details %x interrupt pin %x interrupt line %x\n",InterruptReg, InterruptPin, InterruptLine);
	attachirqhandler(Rtl8139Interrupt, InterruptLine + 32);	 // I have done remapping so have to add 32.
}

char TxBuffer[1300];
char MyMac[5];

void SendPacketOut(unsigned char *packetData, uint32 len)
{
	static uint32 add = TRSMIT_START_DESC;
   static uint32 add2 = TRSMIT_STATUS_DESC;
   printf("%x %x\n",add,add2);
   static int count = 4;
   uint32 value = (uint32)(&TxBuffer[0]) - (uint32)(&TxBuffer[0]) % 32 + 32;
   sleep(2);
   uint32 status = 0x003f0000 | len;
   outl((BaseAddress + add), packetData);
   outl((BaseAddress + add2),status);
   add = TRSMIT_START_DESC+(count%20);
   add2 = TRSMIT_STATUS_DESC+(count%20);
   count = count + 4;
}

char *Rx_Desc;

void ResetCard()
{
    uint32 RTL8139_COMMAND = 0x37;
    //power on 
    outb( (uint16) (BaseAddress + 0x52), 0x00);
   //reset 
   outb( (uint16) (BaseAddress + RTL8139_COMMAND), 0x10);
    while ( (inb( (uint16) (BaseAddress + RTL8139_COMMAND)) & 0x10) != 0 ) {
    	printf("In Reset\n");
    }
   outw((BaseAddress + INT_STATUS_REG), 0xe1ff);
   outw((BaseAddress + PACKET_READ_ADDRESS), 0);
    // Setup receive buffer location
    outl((BaseAddress + RECEIVE_BUFFER_ADDRESS), (uint32)rx_buffer );
    Rx_Desc = imalloc(1240);
	 Rx_Desc = (int)Rx_Desc & 0xffffff80;
    outl((BaseAddress + 0xe4), (uint32)Rx_Desc );
    outw((BaseAddress + INT_MASK_REG), 0xe1ff);  // TOK + ROK
      outl((BaseAddress + RECEIVE_CONFIG_REG), 0xa);// | (1<<7) );
    outb( (BaseAddress + RTL8139_COMMAND), 0x0C );
}

void DetectRTL8139()
{
    uint16 vendorid = 0x10ec;
    uint16 deviceid = 0x8139;
    int present = checkpcitable(deviceid, vendorid);
    if(present)
    {
       printf(" Detected RTL8139 Network Driver\n");
	    BaseAddress = ReadConfigurationDword(0, 3, 0x10);
       WriteConfigurationDword(0,3,0x10,~0);
		 uint32 size = ReadConfigurationDword(0, 3, 0x10);
		 WriteConfigurationDword(0,3,0x10,BaseAddress);
		if( (BaseAddress & 0x1) == 1)
		{
			printf("Detected I/O type \n");
			BaseAddress = BaseAddress & 0xfffffffc ;
		}
		else
		{
			printf("Detected unknown mapped type will do dump\n");
			return;
		}
		GetMacAddress();
		GetInterruptPin();
		ResetCard();
    }
}

void GetMacAddress()
{
	unsigned int i;
	uint8 Mac;
    for(i=0;i<6;i++)
	{
        Mac = inb(BaseAddress + i);
		MyMac[i] = Mac;
		printf("%x\n",Mac);
	}
}
