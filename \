#include "biosservice.h"
#include "common.h"
#include "screen.h"

#define BIOS32_SIGNATURE   (('_' << 0) + ('3' << 8) + ('2' << 16) + ('_' << 24))
#define READCONFIGREG32 0xb10a

static unsigned long  PCIBIOSENTRY;
struct bios32service{
	//uint32 signature ;
	char signature[4] ;
	uint32 entrypoint;
	char revision;
	char length;
	char checksum;
	char reserved[5];
};

typedef struct bios32service * biosservicepointer;


int ReadConfigReg32(uint8 functionid, uint8 busNumber, uint32 deviceNumber, uint8 registerNumber, uint32* value);

int searchbiossignature()
{
	biosservicepointer i;
	biosservicepointer pointer;
	for( i = 0x0e0000 ; i< 0x0fffff ; i++ )
	{
		pointer = (biosservicepointer) i;
		if(pointer->signature[0] == '_' && pointer->signature[1] == '3' && pointer->signature[2] == '2' && pointer->signature[3] == '_' ){
			printf("Detected Bios32 Directory Services\n");
			printf("Bios Revision is %d \n", pointer->revision);
			break;
		}
	}
   PCIBIOSENTRY = pointer->entrypoint;
	uint32 value;
   printf(" bios entry = %u\n", PCIBIOSENTRY);
   ReadConfigReg32(0,0,1,0,&value);
//	getpciclasscode();
}

int ReadConfigReg32(uint8 functionid, uint8 busNumber, uint32 deviceNumber, uint8 registerNumber, uint32* value)
{
	uint32 res=0;
   printf("address = %u", PCIBIOSENTRY);
	uint32 input = (busNumber << 8)|(deviceNumber);// << 3)|(functionid);
	__asm__("lcall (%%esi)\n\t"
				      "jc 1f\n\t"
      "xor %%ah, %%ah\n"
      "1:"
				:"=c" (*value),
				 "=a" (res)
				:"r" (PCIBIOSENTRY),
				 "1" (READCONFIGREG32),
				 "b" (input),
				 "D" (registerNumber),
				 "S" (&PCIBIOSENTRY));
   printf(" ret value = %d\n",res);

}

int getpciclasscode(uint32 bus, uint32 device)
{
 __asm__ ( "movl $10, %eax;"
                "movl $20, %ebx;"
                "addl %ebx, %eax;"
    );
        int no = 0xb001, val ;
		  asm ("movl %1, %%eax;"
             "movl %%ebx, %0;"
             : "=r" ( val )        /* output */
             : "r" ( no )         /* input */
             : "%ebx"         /* clobbered register */
         );
		  asm ("movl %1, %%ebx;"
             "movl %%ebx, %0;"
             : "=r" ( val )        /* output */
             : "r" ( no )         /* input */
             : "%ebx"         /* clobbered register */
         );
    printf("\n%d\n", val);

}
