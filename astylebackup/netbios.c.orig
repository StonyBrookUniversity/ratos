#include "common.h"
#include "screen.h"
typedef struct BIOS32
{
	unsigned long	magic			__attribute__ ((packed));
	unsigned long	phys_bsd_entry		__attribute__ ((packed));
	char	vers			__attribute__ ((packed));
	char	prg_lens		__attribute__ ((packed));
	char	crc			__attribute__ ((packed));
} BIOS32;

BIOS32 *master_bios32;
static unsigned long bios32_call;

char search_pci_bios(void)
{
	char		*P=(char*)0xE0000;
	BIOS32		*X;
	char		flag=0;
	char		crc;
	int			i;

	master_bios32=NULL;
	bios32_call=0;
	while(flag==0 && (unsigned long)P<0X100000)
	{
		X=(BIOS32*)P;
		if(X->magic==0x5F32335F)		/* _32_ */
		{
			for(i=0, crc=0; i<(X->prg_lens*16); i++)
				crc+=*(P+i);
			if(crc==0)
			{
			    flag=1;
			    master_bios32=X;
				bios32_call=master_bios32->phys_bsd_entry;
			}
		}
		else
			P+=0x10;
	}
}


void bios32_scan_pci_entry(void)
{
	unsigned long	cseg_size, offset, base_addr;

	/* call the BIOS32 BSD for the PCI address
 	   BSD calls terminate in RETF not RET */

	uint32 returncode = 12;
	/* eax is loaded with "$PCI" magic */
	asm("movl	$0x49435024, %%eax\n"
	//	"xorl	%%ebx, %%ebx\n"
		"movl	bios32_call, %%ebx\n"
		"pushl	%%cs\n"
		"call	%%ebx\n"
		: "=c" (cseg_size),
		  "=d" (offset),
		  "=b" (base_addr),
		  "=a" (returncode)
		:
		);//: "eax", "ebx", "ecx", "edx", "ebx" );

	printf("return = %d \n",returncode);
	/* setup two new selectors of pci_code32, pci_data32, etc. */
}
