#include "process.h"
#include "common.h"


struct Process{
	uint32 pid;
	uint32 stackPointer;
	uint32 stackStartingAddress;  // this we need to copy stack while doing fork.
	uint32 iPointer;
	uint32 basePointer;
	struct Process *next;
};

typedef struct Process Tasks;

Tasks ProcessQueue;

static uint32 newPid;

static Tasks *currentTask = NULL;
static Tasks *newTask;

extern uint32 GetEIPofInterruptedTask();
extern uint32 GetEIP();
extern uint32 firstProcessStartingStack;
void SaveTask(Tasks *task)
{
	task->iPointer = GetEIP();
}

static struct {
    unsigned long address;
    unsigned short segment;
} direct ;

void CopyStack(Tasks *srcTask, Tasks *dstTask)
{
	int sign = 4;
	char *srcStack = (char *)srcTask->stackStartingAddress;
	char *srcStackCurrent = (char *)srcTask->stackPointer;
    asm (
         "movl %%esp, %0;"
         : "=r" (srcStackCurrent)
         : 
        );

	char *dstStack = (char *)kmalloc(300);
	uint32 diff = srcStack - dstStack;
	dstTask->basePointer = srcTask->basePointer + diff;
	if(srcStack > srcStackCurrent){
		sign = -4;
	}
	while(srcStack != srcStackCurrent){
		if( 
		(*srcStack <= srcTask->stackStartingAddress && *srcStack >= srcTask->stackPointer)
	//		||
	//		(*srcStack > srcTask->stackStartingAddress && *srcStack < srcTask->stackPointer) 
			) {
			*dstStack = *srcStack + diff;
	//dstTask->basePointer = *dstStack;
		}
		srcStack = srcStack + sign;
		dstStack = dstStack + sign;
	}
//	*dstStack = *srcStack ;//+ diff;
	dstTask->stackPointer = dstStack;
}

void ScheduleTask(Tasks *task)
{
	int times=0;
	asm volatile("cli");
	asm volatile("sti");
	printf("Scheduler Called\n");
    printf("current task id = %d\n",currentTask->pid);
	printf("next task id = %d\n",task->pid);
	uint32 eip = task->iPointer;// GetEIP();
	char *stackCurrent;
	stackCurrent = task->stackPointer;
	uint32 ebp; 
	ebp = task->basePointer;
//	times++;
    sleep(5);
//	if(times>=2){
//	    asm volatile("sti");
//		return ;
//	}
    direct.address = eip;
    uint32 kernelcodesegment = 0;
    asm ("movl %%cs, %0;"
         : "=r" (kernelcodesegment)
         :);
    direct.segment = kernelcodesegment;
	printf("Now will do jump from scheduler\n");
	sleep(5);
/*    
	asm volatile("sti");
	asm( "jmp (%%edi)"
         :
         :
		 "D"(&eip)
       );
  */
	Tasks *temp = currentTask;
	currentTask = task;
    temp->iPointer = GetEIP();
	sleep(5);
    times++;
	printf("continuing from schedular turn = %d\n",times);
	if(times>=2){
	    asm volatile("sti");
		return ;
	}

	asm volatile("movl %%ebp, %0" : "=r"(ebp):);
	sleep(5);
//    asm (
//         "movl %%esp, %0;"
 //        : "=r" (stackCurrent)
  //       : 
 //       );
	temp->stackPointer = stackCurrent;
//	stackCurrent = currentTask->stackPointer;
	temp->basePointer = ebp;
//	ebp = currentTask->basePointer;
	printf("old base = %d and new = %d\n",temp->basePointer, currentTask->basePointer);
    asm (
         "movl %0, %%esp;"
		 :
         : "r" (stackCurrent)
        );
//	sleep(16);
	asm volatile("mov %0, %%ebp" : :"r"(ebp));
	asm volatile("sti");
//	return;
/*   asm( "ljmp (%%edi)"
         :
         :
		 "D"(&direct)
       );
	   */
	   printf("Going for jump\n");
	asm( "jmp (%%edi)"
         :
         :
		 "D"(&eip)
       );
	  
}

void PremptProcessQueue()
{
	Tasks *nextTask = currentTask->next;
    printf("Current \n");
	DumpProcess(currentTask);
    printf("Next \n");
    DumpProcess(nextTask);
	sleep(20);
	ScheduleTask(nextTask);
//	ScheduleTask(currentTask);
}

void check(int n)
{
	Tasks *temp = currentTask;
	int i;
	for(i=0;i<n;i++){
		printf("%d \n",temp->pid);
		sleep(5);
		temp = temp->next;
	}
}

void DumpProcess(Tasks *task)
{
	
	printf("pid %d ",task->pid);
	printf("Stack Pointer %d", task->stackPointer);
	printf("Stack Starting %d", task->stackStartingAddress);  // this we need to copy stack while doing fork.
	printf("Ipointer %d", task->iPointer);
	printf("Base %d\n",task->basePointer);
}

int fork()
{
	asm volatile("cli");
//	Tasks *newTask = kmalloc(sizeof(Tasks)+100);
	if(currentTask==NULL){  //this is the first time we are called
		printf("Fork called first time\n");
	    currentTask = kmalloc(sizeof(Tasks));
	 newTask = kmalloc(sizeof(Tasks));
		currentTask->pid = newPid;
		char *stackCurrent;
    	asm (
      	   "movl %%esp, %0;"
      	   : "=r" (stackCurrent)
      	   : 
       	 );
//		currentTask->stackPointer = stackCurrent;
		currentTask->stackStartingAddress =  firstProcessStartingStack;
		int turn = 0;
		uint32 ebp; 
		asm volatile("movl %%ebp, %0" : "=r"(ebp) :);
//		currentTask->basePointer = ebp;
//		currentTask->iPointer = GetEIP();
  		printf("in single old base = %d and new = %d\n",currentTask->basePointer, currentTask->basePointer);
		turn++;
		if(turn>1){
			return 0;
		}
		currentTask->next = currentTask;
		newPid++;
	}
//	Tasks *newTask = kmalloc(sizeof(Tasks)+100);
	newTask->pid = 0;//newPid;
	uint32 childPid ;
	childPid = newPid;
	newPid++;
	uint32 ebp; 
	asm volatile("movl %%ebp, %0" : "=r"(ebp) :);
//	newTask->basePointer = ebp;
	printf("fork called by process %d\n",currentTask->pid);
	sleep(1);
//	Tasks *temp = currentTask->next;
	currentTask->next = newTask;
//	newTask = currentTask;
//	newTask->next = temp;
	newTask->stackStartingAddress =  currentTask->stackStartingAddress;
//	CopyStack(currentTask, newTask);
	printf("out old base = %d and new = %d\n",currentTask->basePointer, currentTask->basePointer);
		char *stackCurrent;
    	asm (
      	   "movl %%esp, %0;"
      	   : "=r" (stackCurrent)
      	   : 
       	 );
		newTask->stackPointer = stackCurrent;
		newTask->stackStartingAddress =  firstProcessStartingStack;
		asm volatile("movl %%ebp, %0" : "=r"(ebp) :);
		newTask->basePointer = ebp;
	  currentTask->stackPointer = stackCurrent;
	  currentTask->basePointer = ebp;
	  currentTask->iPointer = GetEIP();
	newTask->iPointer = GetEIP();
    printf("Camed out\n");
	sleep(10);
	printf("Continuing for id %d\n",currentTask->pid);
    sleep(10);
	printf("Still in fork and Child id was %d or %d and current id %d\n",childPid,newTask->pid,currentTask->pid);
	asm volatile("sti");
    sleep(10);
	if(currentTask->pid == childPid){
		return 0;
	}
	else{
		return childPid;
	}
}
