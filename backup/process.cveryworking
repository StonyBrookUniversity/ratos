// process.c is mainly for tasks scheduling and fork management written for ratos.

#include "process.h"
#include "common.h"


static uint32 EIP = 0;

struct Process{
	uint32 pid;
	uint32 stackPointer;
	uint32 stackStartingAddress;  // this we need to copy stack while doing fork.
	uint32 iPointer;
	uint32 basePointer;
	struct Process *next;
};

typedef struct Process Tasks;

Tasks ProcessQueue;
Tasks *newTask;// = imalloc(sizeof(Tasks)+100);

static uint32 newPid;

static Tasks *currentTask = NULL;

extern uint32 GetEIPofInterruptedTask();
extern uint32 GetEIP();
extern uint32 firstProcessStartingStack;
void SaveTask(Tasks *task)
{
	task->iPointer = GetEIP();
}

static struct {
    unsigned long address;
    unsigned short segment;
} direct ;


void DumpStack(Tasks *srcTask)
{
	printf("Printing Stack for %d\n",srcTask->pid);
	int sign = 4;
	uint32 srcStack = (uint32 )srcTask->stackStartingAddress;
	uint32 srcStackCurrent = (uint32 )srcTask->stackPointer;
	printf("printing from %u to %u\n",srcStack, srcStackCurrent);
	
 	//return ;
	if(srcStack > srcStackCurrent){
		sign = -4;
	}

	 int count = 0;
	while(srcStack != srcStackCurrent){
		if(
	//		 *(uint32*)srcStack 
//		&& 
		 	srcStackCurrent < srcStack + 10 )
		{
			printf("%u, %u   ",srcStack, *(uint32*)srcStack);
		    count ++;
			//printf("\n");	
		}
		if(count ==4 ){
			printf("\n");	
			count =0;
		}
   		srcStack = srcStack + sign;
	}
}

	
void CopyStack(Tasks *srcTask, Tasks *dstTask)
{
	int val = 23;
	int sign = 1;
	uint32 srcStack = (uint32 )srcTask->stackStartingAddress;
	uint32 srcStackStart = srcStack;
	uint32 srcStackCurrent = (uint32 )srcTask->stackPointer;
    asm (
         "movl %%esp, %0;"
         : "=r" (srcStackCurrent)
         : 
        );

    srcTask->stackPointer = srcStackCurrent ; // delete me
	uint32 dstStack = (uint32 )kmalloc(4000);
	dstTask->stackStartingAddress = dstStack;
//problem is somewhere here
    //uint32 diff =  dstStack - srcStack + 4000;
    uint32 diff =  dstStack - srcStackStart;
	printf("\nThe srcstack = %u dststack = %u diff is %u\n", srcStack, dstStack, diff);
	sleep(20);
	uint32 ebp;
	asm volatile("mov %%ebp, %0" : "=r"(ebp) :);
	dstTask->basePointer = ebp + diff;//srcTask->basePointer;// + diff;
	dstTask->stackPointer = srcStackCurrent + diff;
//	return 0;
	dstStack = dstTask->stackPointer;
	if(srcStack > srcStackCurrent){
//		sign = -1;
	}
	srcStack = srcStackCurrent;
	printf("Will copt from %d to %d\n",srcStack,srcStackStart);
	sleep(10);
	while(srcStack != srcStackStart){
		if(
		(*(char *)srcStack <= srcTask->stackStartingAddress && *(char *)srcStack >= srcTask->stackPointer)
	//		||
	//		(*(char *)srcStack > srcTask->stackStartingAddress && *(char *)srcStack < srcTask->stackPointer) 
			) {
			*(char *)dstStack = *(char *)srcStack + diff;
	//dstTask->basePointer = *dstStack;
		}
		else{
//			printf("Value copying for %u with %u\n",dstStack, 100);
			*(char *)dstStack =  *(char *)srcStack ;
	    }		
		srcStack = srcStack + sign;
		dstStack = dstStack + sign;
	}
	if( 
		(*(char *)srcStack <= srcTask->stackStartingAddress && *(char *)srcStack >= srcTask->stackPointer)
	){
	 *(char *)dstStack = *(char *)srcStack + diff;
	}
	else{
			*(char *)dstStack = *(char *)srcStack ;
		
		}
	EIP = GetEIP();
	dstTask->iPointer = EIP;
	printf("Camed from here %d\n",dstTask->iPointer);
	printf("Val = %d\n",val);
	sleep(10);
//	dstTask->stackPointer = dstStack;
	DumpStack(dstTask);
//	DumpStack(srcTask);
//	sleep(100000);
}

void ScheduleTask(Tasks *task)
{
	int times=0;
	asm volatile("cli");
	asm volatile("sti");
	printf("Scheduler Called\n");
    printf("current task id = %d\n",currentTask->pid);
	printf("next task id = %d\n",task->pid);
	uint32 eip = task->iPointer;// GetEIP();
	char *stackCurrent;
	stackCurrent = task->stackPointer;
	uint32 ebp; 
	ebp = task->basePointer;
//	times++;
    sleep(5);
//	if(times>=2){
//	    asm volatile("sti");
//		return ;
//	}
    direct.address = eip;
    uint32 kernelcodesegment = 0;
    asm ("movl %%cs, %0;"
         : "=r" (kernelcodesegment)
         :);
    direct.segment = kernelcodesegment;
	printf("Now will do jump from scheduler\n");
/*    
	asm volatile("sti");
	asm( "jmp (%%edi)"
         :
         :
		 "D"(&eip)
       );
  */
	Tasks *temp = currentTask;
	currentTask = task;
    temp->iPointer = GetEIP();
	sleep(5);
    times++;
	printf("continuing from schedular turn = %d\n",times);
	if(times>=2){
	    asm volatile("sti");
		return ;
	}

	asm volatile("movl %%ebp, %0" : "=r"(ebp):);
	sleep(5);
//    asm (
//         "movl %%esp, %0;"
 //        : "=r" (stackCurrent)
  //       : 
 //       );
//	temp->stackPointer = stackCurrent;
	stackCurrent = currentTask->stackPointer;
//	temp->basePointer = ebp;
	ebp = currentTask->basePointer;
    eip = currentTask->iPointer;
	printf("old base = %u and new = %u\n",ebp, currentTask->basePointer);
	printf("Camed from here IP  =  %u\n",currentTask->iPointer);
	sleep(20);
    asm (
         "movl %0, %%esp;"
		 :
         : "r" (currentTask->stackPointer)
        );

//	sleep(16);
	asm volatile("mov %0, %%ebp" : :"r"(currentTask->basePointer));
	asm volatile("sti");
//	return;
/*   asm( "ljmp (%%edi)"
         :
         :
		 "D"(&direct)
       );
	   
*/
//	eip = EIP;
    //eip = GetEIP();
	printf("Final jump %u or %u\n",eip,EIP);
//	sleep(200);
//	asm volatile("pop %eax");
	//asm volatile("pop %eax");
	asm( "jmp (%%edi)"
         :
         :
		 "D"(&currentTask->iPointer)  // it is necessary to have this as static as after changin bp values will change.
       );
	  
}

void PremptProcessQueue()
{
	Tasks *nextTask = currentTask->next;
    printf("Current \n");
	DumpProcess(currentTask);
    printf("Next \n");
    DumpProcess(nextTask);
	sleep(2);
	ScheduleTask(nextTask);
//	ScheduleTask(currentTask);
}

void check(int n)
{
	Tasks *temp = currentTask;
	int i;
	for(i=0;i<n;i++){
		printf("%d \n",temp->pid);
		sleep(5);
		temp = temp->next;
	}
}

void DumpProcess(Tasks *task)
{
	
	printf("pid %d ",task->pid);
	printf("Stack Pointer %d", task->stackPointer);
	printf("Stack Starting %d", task->stackStartingAddress);  // this we need to copy stack while doing fork.
	printf("Ipointer %d", task->iPointer);
	printf("Base %d\n",task->basePointer);
}

int fork()
{
//	asm volatile("cli");
//	Tasks *newTask = kmalloc(sizeof(Tasks)+100);
	if(currentTask==NULL){  //this is the first time we are called
		printf("Fork called first time\n");
	    currentTask = kmalloc(sizeof(Tasks));
//	 newTask = kmalloc(sizeof(Tasks));
		currentTask->pid = newPid;
		char *stackCurrent;
    	asm (
      	   "movl %%esp, %0;"
      	   : "=r" (stackCurrent)
      	   : 
       	 );
		currentTask->stackPointer = stackCurrent;
		currentTask->stackStartingAddress =  firstProcessStartingStack;
		int turn = 0;
		uint32 ebp; 
		asm volatile("movl %%ebp, %0" : "=r"(ebp) :);
//		currentTask->basePointer = ebp;
//		currentTask->iPointer = GetEIP();
  		printf("in single old base = %d and new = %d\n",currentTask->basePointer, currentTask->basePointer);
		turn++;
		if(turn>1){
			return 0;
		}
		currentTask->next = currentTask;
		newPid++;
	}
	newTask = kmalloc(sizeof(Tasks)+100);
	newTask->pid = newPid;
	uint32 childPid ;
	childPid = newPid;
	newPid++;
	uint32 ebp; 
	asm volatile("movl %%ebp, %0" : "=r"(ebp) :);
//	newTask->basePointer = ebp;
	printf("fork called by process %d\n",currentTask->pid);
	sleep(1);
//	Tasks *temp = currentTask->next;
	currentTask->next = newTask;
	printf("Task address 1 = %d",currentTask->next);
//	newTask = currentTask;
//	newTask->next = temp;
	newTask->stackStartingAddress =  currentTask->stackStartingAddress;
	printf("Task address 4= %d",currentTask->next);
	childPid = 91;
	CopyStack(currentTask, newTask);
	printf("Task address 3 = %d",currentTask->next);
	printf("out old base = %d and new = %d\n",currentTask->basePointer, currentTask->basePointer);
//		char *stackCurrent;
  //  	asm (
    //  	   "movl %%esp, %0;"
      //	   : "=r" (stackCurrent)
      	//   : 
 //      	 );
//		newTask->stackPointer = stackCurrent;
//		newTask->stackStartingAddress =  firstProcessStartingStack;
//		asm volatile("movl %%ebp, %0" : "=r"(ebp) :);
//		newTask->basePointer = ebp;
//	  currentTask->stackPointer = stackCurrent;
//	  currentTask->basePointer = ebp;
//	  currentTask->iPointer = GetEIP();
//	newTask->iPointer = GetEIP();
	printf("Camed out success \n");
	sleep(10);
    printf("Task address 2= %d",currentTask->next);
    printf("Camed out\n");
	printf("Continuing for id %d\n",currentTask->pid);
	//DumpProcess(currentTask->next);
	printf("Dumping Task\n");
	DumpProcess(newTask);
	printf("Dumping Task %d %d\n",newTask, currentTask->next);
	DumpProcess(currentTask->next);
    sleep(10);
	printf("Still in fork and Child id was %d or %d and current id %d\n",childPid,newTask->pid,currentTask->pid);
    sleep(50);
	asm volatile("sti");
    sleep(10);
	if(currentTask->pid == childPid){
		return 0;
	}
	else{
		return childPid;
	}
}
